// Generated by CoffeeScript 1.10.0
var Emitter, debug, gciprinter, gcprinter, initRequiredMsg, isDocReady, isSecureSite, log, trim, win;

Emitter = require('emitter');

trim = require('trim');

debug = require('debug');

log = debug('gcprinter');

win = window;

isDocReady = false;

isSecureSite = win.location.protocol.indexOf("https") >= 0;

initRequiredMsg = 'because plugin has not been initialized';


/**
 * gciprinter
 */

gciprinter = (function() {
  gciprinter.prototype.doc = win.document;

  gciprinter.prototype.api = 'https://clientapi.gsn2.com/api/v1/ShoppingList/CouponPrint';

  gciprinter.prototype.retries = 0;

  gciprinter.prototype.isReady = false;

  gciprinter.prototype.hasInit = false;

  gciprinter.prototype.cacheResult = {};

  gciprinter.prototype.debug = debug;

  gciprinter.prototype.isWindows = navigator.platform.indexOf('Win') > -1;

  gciprinter.prototype.isMac = navigator.platform.indexOf('Mac') > -1;

  gciprinter.prototype.isChrome = /chrome/i.test(navigator.userAgent);

  gciprinter.prototype.dl = {
    win: "http://cdn.coupons.com/ftp.coupons.com/partners/CouponPrinter.exe",
    mac: "http://cdn.coupons.com/ftp.coupons.com/safari/MacCouponPrinterWS.dmg"
  };


  /**
   * create a new instance of gciprinter
   * @return {Object}
   */

  function gciprinter() {
    var myHtml, sc, scExtension, self;
    self = this;
    if (!isDocReady) {
      myHtml = '<input type="hidden" id="https-supported" name="https-supported" value="true">';
      document.write("<!--[if (lte IE 9) & (cpbrkpie) & (gte cpbrkpie 5.0200)]>\n" + myHtml + "\n<![endif]-->");
    }
    sc = "https://cdn.cpnscdn.com/static/libraries/js/printcontrol_v3";
    scExtension = debug.enabled('gcprinter') ? ".js" : ".min.js";
    jQuery.ajax({
      type: 'GET',
      url: "" + sc + scExtension,
      dataType: 'script',
      contentType: 'application/json'
    });
  }


  /**
   * Log a message
   * @param  {string} msg message
   * @return {Object}
   */

  gciprinter.prototype.log = function(msg) {
    var self;
    self = this;
    log(msg);
    return self;
  };


  /**
   * print coupon provided site or chainid and coupons array
   * @param  {Number} siteId  Site or Chain Id
   * @param  {Array}  coupons array of manufacturer coupon codes
   * @return {Object}
   */

  gciprinter.prototype.print = function(siteId, coupons) {
    var deviceId, payload, self;
    self = this;
    self.init();
    if (!self.isReady) {
      gcprinter.log("print - false - " + initRequiredMsg);
      return false;
    }
    deviceId = self.getDeviceId();
    if (deviceId < 1) {
      gcprinter.log("printinvalid - bad device id " + deviceId);
      gcprinter.emit('printinvalid', 'gsn-device');
      return;
    }
    payload = trim((coupons || []).join(','));
    if (payload.length > 0) {
      payload = encodeURIComponent(payload);
      jQuery.ajax({
        type: 'GET',
        url: self.api + "/" + siteId + "/" + deviceId + "?callback=?&coupons=" + payload,
        dataType: 'jsonp'
      }).done(function(svrRsp) {
        var evt;
        if (svrRsp.Success) {
          evt = {
            cancel: false
          };
          if (!evt.cancel) {
            gcprinter.emit('printing', evt, svrRsp);
            return gcprinter.printWithToken(svrRsp.Token, svrRsp);
          } else {
            return gcprinter.emit('printfail', 'gsn-cancel', svrRsp);
          }
        } else {
          return gcprinter.emit('printfail', 'gsn-server', svrRsp);
        }
      });
    } else {
      gcprinter.log("printinvalid - no coupon payload");
      gcprinter.emit('printinvalid', 'gsn-no-coupon');
    }
    return true;
  };


  /**
   * print coupon provided a token
   * @param  {string} printToken token
   * @param  {Object} rsp        server side response object
   * @return {Object}
   */

  gciprinter.prototype.printWithToken = function(printToken, rsp) {
    var self;
    self = this;
    self.init();
    if (!self.isReady) {
      gcprinter.log("printWithToken - false - " + initRequiredMsg);
      return false;
    }
    COUPONSINC.printcontrol.printCoupons(printToken, function(e) {
      gcprinter.log("printed " + e);
      if (e === 'blocked') {
        return gcprinter.emit('printfail', e, rsp);
      } else {
        return gcprinter.emit('printed', e, rsp);
      }
    });
    return self;
  };


  /**
   * allow callback to check if coupon printer is installed
   * @param  {Function} fnSuccess
   * @param  {Function} fnFail
   * @return {Object}
   */

  gciprinter.prototype.checkInstall = function(fnSuccess, fnFail) {
    var cb, error1, self, type;
    self = this;
    self.init();
    if (!self.isReady) {
      gcprinter.log("checkInstall - false - " + initRequiredMsg);
      return false;
    }
    cb = function(e) {
      if (e != null) {
        jQuery.extend(self.cacheResult, e);
        self.cacheResult.isPrinterSupported = e.isPrinterSupported === 0 ? false : true;
        if (e.deviceId > 0) {
          if (fnSuccess != null) {
            return fnSuccess(e);
          }
        } else if (fnFail) {
          return fnFail(e);
        }
      } else if (fnFail) {
        return fnFail();
      }
    };
    type = self.key || (self.isChrome ? 'new' : 'plugin');
    try {
      COUPONSINC.printcontrol.installCheck(type, cb);
    } catch (error1) {
      cb();
    }
    return this;
  };


  /**
   * determine if plugin is installed
   * @return {Boolean}
   */

  gciprinter.prototype.hasPlugin = function() {
    var error1, self;
    self = this;
    self.init();
    if (!self.isReady) {
      gcprinter.log("hasPlugin - false - " + initRequiredMsg);
      return false;
    }
    try {
      return COUPONSINC.printcontrol.isPrintControlInstalled();
    } catch (error1) {
      return false;
    }
  };


  /**
   *
   */

  gciprinter.prototype.getUpdateSupported = function() {
    var error1, self;
    self = this;
    self.init();
    if (!self.isReady) {
      gcprinter.log("getUpdateSupported - false - " + initRequiredMsg);
      return false;
    }
    try {
      return COUPONSINC.printcontrol.getUpdateSupported();
    } catch (error1) {
      return false;
    }
  };


  /**
   * get the plugin device id
   * @return {Object}
   */

  gciprinter.prototype.getDeviceId = function() {
    var error1, self;
    self = this;
    self.init();
    if (!self.isReady) {
      gcprinter.log("getDeviceId - 0 - " + initRequiredMsg);
      return 0;
    }
    if ((self.cacheResult.deviceId != null) && self.cacheResult.deviceId > 0) {
      return self.cacheResult.deviceId;
    }
    try {
      return self.cacheResult.deviceId = COUPONSINC.printcontrol.getDeviceID();
    } catch (error1) {
      return self.cacheResult.deviceId;
    }
  };


  /**
   * determine if printer is supported (not pdf/xps/virtual printer etc..)
   * @return {Boolean}
   */

  gciprinter.prototype.isPrinterSupported = function() {
    var error1, self;
    self = this;
    self.init();
    if (!self.isReady) {
      gcprinter.log("isPrinterSupported - false - " + initRequiredMsg);
      return false;
    }
    if ((self.cacheResult.isPrinterSupported != null) && self.cacheResult.isPrinterSupported === true) {
      return self.cacheResult.isPrinterSupported;
    }
    try {
      return self.cacheResult.isPrinterSupported = COUPONSINC.printcontrol.isPrinterSupported();
    } catch (error1) {
      return false;
    }
  };


  /**
   * determine if plugin is blocked
   * @return {Boolean}
   */

  gciprinter.prototype.isPluginBlocked = function() {
    var error1, result, self;
    self = this;
    self.init();
    if (!self.isReady) {
      gcprinter.log("isPluginBlocked - false - " + initRequiredMsg);
      return false;
    }
    result = !self.isWebSocket();
    try {
      if (result) {
        result = COUPONSINC.printcontrol_plugin.isPluginBlocked();
      }
    } catch (error1) {
      result = false;
    }
    return result;
  };


  /**
   * determine if plugin uses websocket
   * @return {Boolean}
   */

  gciprinter.prototype.isWebSocket = function() {
    var error1, self;
    self = this;
    self.init();
    if (!self.isReady) {
      gcprinter.log("isWebSocket - false - " + initRequiredMsg);
      return false;
    }
    try {
      return COUPONSINC.printcontrol.getManager().getSocket != null;
    } catch (error1) {
      return false;
    }
  };


  /**
   * get the current status code
   * @return {string} status code
   */

  gciprinter.prototype.getStatus = function() {
    var error1, self;
    self = this;
    self.init();
    if (!self.isReady) {
      gcprinter.log("getStatus - false - " + initRequiredMsg);
      return false;
    }
    if ((self.initResult != null) && self.initResult.deviceId < 0) {
      return self.initResult.status;
    }
    try {
      return COUPONSINC.printcontrol.getStatusCode();
    } catch (error1) {
      return false;
    }
  };


  /**
   * get the plugin download url
   * @param  {Boolean} isWindows true if windows
   * @return {[string}            the download URL
   */

  gciprinter.prototype.getDownload = function(isWindows) {
    var self;
    self = this;
    if (isWindows || self.isWindows) {
      return self.dl.win;
    }
    return self.dl.mac;
  };


  /**
   * detect plugin with socket
   * @param  {[type]} timeout   [description]
   * @param  {[type]} cbSuccess [description]
   * @param  {[type]} cbFailure [description]
   * @param  {[type]} retries   [description]
   * @return {[type]}           [description]
   */

  gciprinter.prototype.detectWithSocket = function(timeout, cbSuccess, cbFailure, retries) {
    var error1, exception, self, socket;
    self = this;
    self.retries = retries;
    self.log("self check socket");
    try {
      socket = new WebSocket('ws://localhost:26876');
      socket.onopen = function() {
        self.log("self check socket success");
        socket.close();
        return cbSuccess();
      };
      socket.onerror = function(error) {
        self.log("self check socket failed, retries remain " + retries);
        socket.close();
        win.setTimeout(function() {
          if (self.retries <= 1) {
            cbFailure();
            return self;
          }
          self.detectWithSocket(timeout, cbSuccess, cbFailure, self.retries - 1);
          return self;
        }, timeout);
        return self;
      };
    } catch (error1) {
      exception = error1;
      cbFailure();
    }
    return self;
  };


  /**
   * initialize COUPONSINC object
   * @param  {Boolean} force to restart init
   * @return {Object}
   */

  gciprinter.prototype.init = function(force) {
    var cb, myCb, self, type;
    self = gcprinter;
    if (force) {
      self.isReady = false;
      self.hasInit = false;
    }
    if (!self.isReady && (typeof COUPONSINC !== "undefined" && COUPONSINC !== null)) {
      if (self.hasInit) {
        return self;
      }
      self.hasInit = true;
      type = self.key || (self.isChrome ? 'new' : 'plugin');
      self.log("init starting " + type);
      cb = function(e) {
        self.log("init completed");
        self.isReady = true;
        self.initResult = e;
        if (e != null) {
          jQuery.extend(self.cacheResult, e);
          self.cacheResult.isPrinterSupported = e.isPrinterSupported === 0 ? false : true;
        }
        return self.emit('initcomplete', self);
      };
      myCb = function() {
        self.log("actual plugin init");
        return jQuery.when(COUPONSINC.printcontrol.init(type, isSecureSite)).then(cb, cb);
      };
      if (type === 'new') {
        self.detectWithSocket(5, myCb, myCb, 1);
      } else {
        myCb();
      }
    }
    return self;
  };

  return gciprinter;

})();

Emitter(gciprinter.prototype);

if (win.gcprinter != null) {
  gcprinter = win.gcprinter;
} else {
  gcprinter = new gciprinter();
}

jQuery(document).ready(function() {
  return isDocReady = true;
});

win.gcprinter = gcprinter;

module.exports = gcprinter;
